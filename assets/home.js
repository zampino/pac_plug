// Generated by CoffeeScript 1.7.1
(function() {
  var Grid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.HomeView = (function() {
    function HomeView() {
      this.controls = $("#controls");
      this.buildControls();
      this.promptName();
      this.keyboardBindings();
      this.grid = new Grid;
    }

    HomeView.prototype.buildControls = function() {
      return this.controls.html($("<input id='choose_name' type='text' placeholder='type a name'/><button id='name_chosen'>GO!</button>"));
    };

    HomeView.prototype.promptName = function() {
      this.buildControls();
      return this.controls.on('click', '#name_chosen', (function(_this) {
        return function() {
          _this.name = $('#choose_name').val();
          if (!_this.name) {
            return alert('please choose a name!');
          }
          return _this.addPacman();
        };
      })(this));
    };

    HomeView.prototype.keyboardBindings = function() {
      return $(window).on('keyup', (function(_this) {
        return function(e) {
          return console.log(e.key);
        };
      })(this));
    };

    HomeView.prototype.turn = function(direction) {
      return $.ajax("pacmans/turn/" + name + "/" + direction, {
        type: "PUT"
      });
    };

    HomeView.prototype.addPacman = function() {
      return $.post("/pacmans/add/" + this.name);
    };

    return HomeView;

  })();

  Grid = (function() {
    function Grid() {
      this.update = __bind(this.update, this);
      this.$el = $('#grid');
      this.buildCells();
      this.startStream();
    }

    Grid.prototype.buildCells = function() {
      var add_x, y, _i, _results;
      add_x = (function(_this) {
        return function(y) {
          var x, _i, _results;
          _results = [];
          for (x = _i = 0; _i <= 19; x = ++_i) {
            _results.push(_this.add(x, y));
          }
          return _results;
        };
      })(this);
      _results = [];
      for (y = _i = 0; _i <= 19; y = ++_i) {
        _results.push(add_x(y));
      }
      return _results;
    };

    Grid.prototype.add = function(x, y) {
      this["cell-" + x + "-" + y] = $("<div class='cell' id='" + x + "_" + y + "' />");
      return this.$el.append(this["cell-" + x + "-" + y]);
    };

    Grid.prototype.all = function() {
      return $(".cell", this.$el);
    };

    Grid.prototype.cell = function(x, y) {
      return this["cell-" + x + "-" + y];
    };

    Grid.prototype.updateOne = function(pacman) {
      var name, x, y, _i, _len, _ref;
      x = pacman.position.x;
      y = pacman.position.y;
      _ref = this.names;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        this.all().removeClass(name);
      }
      this.cell(x, y).addClass(pacman.name);
      return console.log(this.cell(x, y));
    };

    Grid.prototype.update = function(event) {
      var pacman, pacmans, _i, _len, _results;
      console.log(event.data);
      pacmans = JSON.parse(event.data);
      if (pacmans.length > 0) {
        console.log("aho!", pacmans);
        this.names = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = pacmans.length; _i < _len; _i++) {
            pacman = pacmans[_i];
            _results.push(pacman.name);
          }
          return _results;
        })();
        _results = [];
        for (_i = 0, _len = pacmans.length; _i < _len; _i++) {
          pacman = pacmans[_i];
          _results.push(this.updateOne(pacman));
        }
        return _results;
      }
    };

    Grid.prototype.startStream = function() {
      var source;
      source = new EventSource('pacmans/stream');
      console.log(source);
      return source.addEventListener('message', this.update, false);
    };

    return Grid;

  })();

}).call(this);
